<?php

use Drupal\search_api\Query\QueryInterface;
use Solarium\QueryType\Select\Query\FilterQuery;
use Solarium\QueryType\Select\Query\Query;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Database\DatabaseException;
use Drupal\Core\Database\Database;
use Drupal\Core\Utility\UpdateException;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function uhsg_search_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $form['#attached']['library'][] = 'uhsg_search/uhsg-search';
    $form['#attached']['library'][] = 'uhsg_search/filter_search';
    $form['#attributes']['class'][] = 'search-form';
    $form['search_api_fulltext']['#attributes']['placeholder'] = t('Search instructions by word (or beginning of a word)');
    $form['search_api_fulltext']['#attributes']['class'][] = 'search-form__input';
    $form['search_api_fulltext']['#attributes']['required'] = '';
    $form['actions']['submit']['#attributes']['class'][] = 'search-form__submit';
    $form['actions']['submit']['#attributes']['aria-label'] = t('Search');
    $form['actions']['submit']['#value'] = "\u{EA35}";
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Add content type as data attribute for search filtering.
 */
function uhsg_search_preprocess_node(&$variables) {
  if ($variables['view_mode'] == 'constrained') {
    $node = $variables['node'];
    if ($node->getType() == 'article') {
      $variables['attributes']['data-type'] = [];
      $is_degree_programme_specific = uhsg_search_article_is_degree_programme_specific($node);
      if ($is_degree_programme_specific) {
        $variables['attributes']['data-type'][] = 'article_degree_programme_specific';
      }
      $is_other_education_provider_specific = uhsg_search_article_is_other_education_provider_specific($node);
      if ($is_other_education_provider_specific) {
        $variables['attributes']['data-type'][] = 'article_other_education_provider_specific';
      }
      if (!$is_degree_programme_specific && !$is_other_education_provider_specific) {
        $variables['attributes']['data-type'][] = 'article_general';
      }
    }
    else {
      $variables['attributes']['data-type'] = $node->getType();
    }

    if ($user_group = $node->get('field_user_group')->value) {
      $variables['attributes']['data-user-group'] = $user_group;
    }

    $variables['#cache']['contexts'][] = 'active_degree_programme';
    $variables['#cache']['contexts'][] = 'other_education_provider';
  }
}

/**
 * Return TRUE if active degree programme is one of the terms in the node.
 *
 * @param $node
 * @return bool TRUE if active degree programme is one of the terms in the node.
 */
function uhsg_search_article_is_degree_programme_specific($node) {
  $active_degree_programme = \Drupal::service('uhsg_active_degree_programme.active_degree_programme')->getId();
  $terms = $node->get('field_article_degree_programme')->getValue();
  if ($terms && $active_degree_programme) {
    foreach ($terms as $term) {
      // check if article has the active degree programme as term.
      if ($active_degree_programme == $term['target_id']) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Return TRUE if active other education provider is one of the terms in the
 * node.
 *
 * @param $node
 * @return bool TRUE if active other education provider is one of the terms in
 *  the node.
 */
function uhsg_search_article_is_other_education_provider_specific($node) {
  $other_education_provider = \Drupal::service('uhsg_other_education_provider.other_education_provider')->getId();
  $terms = $node->get('field_other_education_provider')->getValue();
  if ($terms && $other_education_provider) {
    foreach ($terms as $term) {
      // check if article has the other education provider as term.
      if ($other_education_provider == $term['target_id']) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Implements hook_search_api_solr_query_alter().
 */
function uhsg_search_search_api_solr_query_alter(Query $solarium_query, QueryInterface $query) {
  uhsg_search_wildcard_query($solarium_query);
  uhsg_search_domain_filter($solarium_query);
  uhsg_search_degree_programme_query($solarium_query);
  uhsg_search_other_education_provider_query($solarium_query);
  uhsg_search_news_creation_time_filter($solarium_query);
}

/**
 * Transform single word queries into wildcard queries to match partial words.
 * Does not affect the query when multiple words are provided.
 *
 * Example transformation:
 *
 * "teachi" -> teachi*
 *
 * @param \Solarium\QueryType\Select\Query\Query $solarium_query
 */
function uhsg_search_wildcard_query(Query $solarium_query) {
  $query = $solarium_query->getQuery();
  $single_word_query = !empty($query) && strpos($query, '+') === FALSE;

  if ($single_word_query) {

    // Remove quotes.
    $word = str_replace('"', '', $query);

    // Query with exact and wildcard term to match both exact and partial text.
    $query = "$word OR $word*";

    // Override query.
    $solarium_query->setQuery($query);
  }
}

/**
 * Add active domain filtering to search query for articles and themes. News do
 * not have domain associated with them. Allow news results on student domain.
 * Exclude all news when on teaching domain.
 *
 * @param \Solarium\QueryType\Select\Query\Query $solarium_query
 */
function uhsg_search_domain_filter(Query $solarium_query) {
  $active_domain_id = \Drupal::service('uhsg_domain.domain')->getActiveDomainId();

  $query = '(';
  $query .= "ss_field_theme_domain:$active_domain_id OR ss_field_article_domain:$active_domain_id";
  if (\Drupal::service('uhsg_domain.domain')->isStudentDomain()) {
    $query .= ' OR ss_type:news';
  }
  $query .= ')';

  $domain_filter_query = (new FilterQuery())->setKey('domain')->setQuery($query);
  $solarium_query->addFilterQuery($domain_filter_query);
}

/**
 * Add active degree programme filtering to search query for articles and news.
 * Exclude articles and themes that have a degree programme associated with them
 * when it does not match the active degree programme. Include articles and news
 * that do not have any degree programme associated with them. Include themes
 * (themes do not have degree programme associated with them).
 *
 * @param \Solarium\QueryType\Select\Query\Query $solarium_query
 */
function uhsg_search_degree_programme_query(Query $solarium_query) {
  $active_degree_programme = \Drupal::service('uhsg_active_degree_programme.active_degree_programme')->getId();

  if ($active_degree_programme) {
    $query = '(';
    $query .= "(ss_type:article AND itm_article_degree_programme_tid:$active_degree_programme) ";
    $query .= "OR (ss_type:news AND itm_news_degree_programme_tid:$active_degree_programme) ";
    $query .= 'OR (ss_type:article AND *:* NOT itm_article_degree_programme_tid:*) ';
    $query .= 'OR (ss_type:news AND *:* NOT itm_news_degree_programme_tid:*) ';
    $query .= 'OR ss_type:theme';
    $query .= ')';

    $degree_programme_filter_query = (new FilterQuery())->setKey('degree_programme')->setQuery($query);
    $solarium_query->addFilterQuery($degree_programme_filter_query);
  }
}

/**
 * Add other education provider filtering to search query for articles. Exclude
 * articles that have an other education provider associated with them when it
 * does not match the active other education provider. Include articles that do
 * not have any other education provider associated with them. Include news and
 * themes.
 *
 * @param \Solarium\QueryType\Select\Query\Query $solarium_query
 */
function uhsg_search_other_education_provider_query(Query $solarium_query) {
  $other_education_provider = \Drupal::service('uhsg_other_education_provider.other_education_provider')->getId();

  if ($other_education_provider) {
    $query = '(';
    $query .= "(ss_type:article AND itm_other_education_provider_tid:$other_education_provider) ";
    $query .= 'OR (ss_type:article AND *:* NOT itm_other_education_provider_tid:*) ';
    $query .= 'OR ss_type:news ';
    $query .= 'OR ss_type:theme';
    $query .= ')';

    $other_education_provider_filter_query = (new FilterQuery())->setKey('other_education_provider')->setQuery($query);
    $solarium_query->addFilterQuery($other_education_provider_filter_query);
  }
}

/**
 * Add creation time filtering to search query for news. Exclude news that have
 * been created over a year ago.
 *
 * @param \Solarium\QueryType\Select\Query\Query $solarium_query
 */
function uhsg_search_news_creation_time_filter(Query $solarium_query) {
  $current_time = \Drupal::time()->getCurrentTime();
  $seconds_in_year = 31536000;
  $year_ago = $current_time - $seconds_in_year;
  $query = '(';
  $query .= "ss_type:article ";
  $query .= "OR ss_type:theme ";
  $query .= "OR (ss_type:news AND its_created:[$year_ago TO *])";
  $query .= ')';

  $news_creation_time_filter_query = (new FilterQuery())->setKey('news_creation_time')->setQuery($query);
  $solarium_query->addFilterQuery($news_creation_time_filter_query);
}

/**
 * Code and idea partially stolen from
 * Drupal\search_api_db\DatabaseCompatibility\MySQL::alterNewTable()
 */
function uhsg_search_convert_table_collation($table, $charset = 'utf8mb4', $collation = 'utf8mb4_swedish_ci') {
  $database = \Drupal::database();
  // This might not be see in the drush console.
  // https://github.com/drush-ops/drush/issues/3449
  \Drupal::messenger()->addStatus(t('Executing table "%table" conversion to charset "%charset" with collation "%collation".', [
    '%table' => $table,
    '%collation' => $collation,
    '%charset' => $charset,
  ]));

  try {
    $database->query("ALTER TABLE {{$table}} CONVERT TO CHARACTER SET '$charset' COLLATE '$collation' ")->execute();

    // Placeholders dont seem to work in this context.
    //$database->query("ALTER TABLE {{$table}} CONVERT TO CHARACTER SET :charset COLLATE :collation ", [
    //  ':charset' => $charset,
    //  ':collation' => $collation,
    //])->execute();
  }
  catch (\Exception $e) {
    throw new UpdateException("Could not convert collation to table {{$table}}: " . $e->getMessage(), 0, $e);
  }
  catch (DatabaseException $e) {
    \Drupal::messenger()->addError(t('Database Exception during attempted table "%table" conversion to charset "%charset" with collation "%collation". Error : %message .', [
      '%table' => $table,
      '%collation' => $collation,
      '%charset' => $charset,
      '%message' => $e->getMessage(),
    ]));
  }
}

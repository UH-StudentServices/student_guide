<?php

/**
 * @file
 * Contains uhsg_news.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\Entity\Node;

/**
 * Implements hook_help().
 */
function uhsg_news_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the uhsg_news module.
    case 'help.page.uhsg_news':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides advanced properties for news like filtered listings and emailing.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_element_info_alter().
 */
function uhsg_news_element_info_alter(array &$info) {
  if (isset($info['datetime'])) {
    // Add our custom datetime validation as the first validator.
    array_unshift($info['datetime']['#element_validate'], [
      'Drupal\uhsg_news\Validate\DateTimeConstraint',
      'validateDateTime',
    ]);
  }
}

/**
 * Implements hook_form_alter().
 */
function uhsg_news_form_alter(&$form, $form_state, $form_id) {
  uhsg_news_add_email_tab($form, $form_state, $form_id);
  uhsg_news_alter_scheduling_description($form, $form_state, $form_id);
}

/**
 * Adds an email tab to the news add and edit forms.
 */
function uhsg_news_add_email_tab(&$form, $form_state, $form_id) {
  if (in_array($form_id, ['node_news_form', 'node_news_edit_form'])) {
    $node = $form_state->getFormObject()->getEntity();
    $email = &$form['field_news_email'];
    $email['#type'] = 'details';
    $email['#group'] = 'advanced';
    // Field label translation doesn't seem to work, so translate workaround
    // phpcs:ignore
    $email['#title'] = t($email['widget']['#title']);
    $email['#open'] = FALSE;
    $email['#disabled'] = $form_id == 'node_news_form' || uhsg_news_email_has_been_sent($node);

    if (uhsg_news_email_has_been_sent($node)) {
      $email['#description'] = t('This news has been sent to the following email addresses:');
    }
    else {
      $email['#description'] = t('Send the news to the given email addresses. The email can be sent just once.');
    }
  }
}

/**
 * @param \Drupal\node\Entity\Node $node
 * @return bool Has the news email been sent?
 */
function uhsg_news_email_has_been_sent(Node $node) {
  return (bool) $node->get('field_news_email_sent')->value;
}

/**
 * Alter scheduling description on the news add and edit forms to provide more
 * information on varying date and time formats.
 */
function uhsg_news_alter_scheduling_description(&$form, $form_state, $form_id) {
  if (in_array($form_id, ['node_news_form', 'node_news_edit_form'])) {
    $description = t('The scheduling date and time formats depend on the settings of the web browser and the operating system you are using. If the suggested format is in the format of month / day / year, remember to use 12-hour clock and select AM or PM as the suffix.');
    
    $form['publish_on']['widget'][0]['value']['#description'] .= " $description";
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function uhsg_news_node_presave(EntityInterface $entity) {
  if ($entity->bundle() == 'news') {
    uhsg_news_use_publish_on_as_created($entity);
    uhsg_news_assign_degree_programmes_by_faculties($entity);

    if (!$entity->isNew() && $entity->isPublished() && !uhsg_news_email_has_been_sent($entity)) {
      uhsg_news_send_news_by_email($entity);
    }
  }
}

/**
 * Use publish on time as created time when publish on is set.
 *
 * @param $node \Drupal\node\Entity\Node
 */
function uhsg_news_use_publish_on_as_created(Node $node) {
  $publish_on = $node->get('publish_on')->value;

  if (!empty($publish_on)) {
    $node->set('created', $publish_on);
  }
}

/**
 * Send the news by email if the email has been given. Recipients are set as
 * "bcc" to avoid disclosing email addresses to all recipients. Site email is
 * used as the "to" recipient, as "to" is required in order to send the email. 
 *
 * @param $node \Drupal\node\Entity\Node
 */
function uhsg_news_send_news_by_email(Node $node) {
  $emails = $node->get('field_news_email')->getValue();

  if (!empty($emails)) {
    $message = uhsg_news_get_title($node, 'fi');
    $message .= uhsg_news_get_title($node, 'sv');
    $message .= uhsg_news_get_title($node, 'en');
    $message .= $node->toUrl('canonical', ['absolute' => TRUE])->toString();

    $bcc = implode(', ', array_column($emails, 'value'));
    $params['bcc'] = $bcc;
    $params['subject'] = t('Bulletin: @label', ['@label' => $node->label()]);
    $params['message'] = $message;
    $langcode = \Drupal::currentUser()->getPreferredLangcode();
    $to = \Drupal::config('system.site')->get('mail');

    $result = \Drupal::service('plugin.manager.mail')->mail('uhsg_news', 'email_news', $to, $langcode, $params, NULL, TRUE);

    if ($result['result'] !== TRUE) {
      drupal_set_message(t('Email sending failed.'), 'error');
    }
    else {
      $node->set('field_news_email_sent', 1);
      drupal_set_message(t('Email sent to @email.', ['@email' => $bcc]));
    }
  }
}

/**
 * @param \Drupal\node\Entity\Node $node
 * @param string $langcode
 * @return string Title and body formatted.
 */
function uhsg_news_get_title(Node $node, $langcode) {
  $formatted_text = '';

  if ($node->hasTranslation($langcode)) {
    $translation = $node->getTranslation($langcode);
    $formatted_text = $translation->label() . "\n\n";
  }

  return $formatted_text;
}

/**
 * Implements hook_mail().
 */
function uhsg_news_mail($key, &$message, $params) {
  if ($key == 'email_news') {
    $message['from'] = \Drupal::config('system.site')->get('mail');
    $message['subject'] = $params['subject'];
    $message['body'][] = $params['message'];
    $message['headers']['bcc'] = $params['bcc'];
  }
}

/**
 * Assign degree programmes by faculties.
 */
function uhsg_news_assign_degree_programmes_by_faculties(EntityInterface $entity) {
  if (in_array($entity->bundle(), ['news'])) {
    $faculty_terms = $entity->get('field_news_faculty')->referencedEntities();

    if (!empty($faculty_terms)) {

      // Existing news degree programme term IDs.
      $existing_news_degree_programme_term_ids = array_map(function ($reference) {
        return $reference['target_id'];
      }, $entity->get('field_news_degree_programme')->getValue());

      // Faculty degree programme term IDs.
      $faculty_degree_programme_term_ids = [];

      foreach ($faculty_terms as $faculty_term) {
        foreach ($faculty_term->field_faculty_degree_programme as $degree_programme) {
          $faculty_degree_programme_term_ids[] = $degree_programme->target_id;
        }
      }

      // Merge news and faculty degree programme IDs avoiding duplicates.
      $merged_news_degree_programme_term_ids = array_unique(array_merge(
        $existing_news_degree_programme_term_ids,
        $faculty_degree_programme_term_ids
      ));

      // Reset news degree programme term IDs.
      $entity->field_news_degree_programme = [];

      // Store merged degree programme term references.
      foreach ($merged_news_degree_programme_term_ids as $degree_programme_term_id) {
        $entity->field_news_degree_programme[] = ['target_id' => $degree_programme_term_id];
      }
    }
  }
}

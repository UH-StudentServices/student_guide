<?php

/**
 * @file
 * Contains uhsg_article.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\taxonomy\TermInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\node\Entity\Node;

/**
 * Implements hook_help().
 */
function uhsg_article_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the uhsg_article module.
    case 'help.page.uhsg_article':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides article paragraphs.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_preprocess_field().
 * Add table of contents and show paragraphs if term is in url
 */
function uhsg_article_preprocess_field(array &$variables, $hook) {
  if ($variables['element']['#field_name'] == 'field_article_paragraph') {

    // If we have selected degree programme, filter by that or else filter out
    // all paragraphs that has any degree programme chosen.
    // TODO: Should we use parameter placeholder for taxonomy term entity instead tid?
    $param = \Drupal::service('uhsg_active_degree_programme.active_degree_programme')->getId();
    if ($param) {
      $degree_programme = Term::load($param);
      uhsg_article_filter_paragraphs_by_degree_programme($variables, $degree_programme);
    }
    else {
      uhsg_article_filter_paragraphs_with_degree_programme($variables);
    }

    uhsg_article_collect_table_of_contents($variables);

    // Because of these alterations, our result may vay depending on active
    // degree programme.
    $variables['#cache']['contexts'][] = 'active_degree_programme';
  }

  uhsg_article_process_paragraph_link_titles($variables);
}

/**
 * If the link targets a node and no link title is set, use link target node
 * title as the link text.
 *
 * @param array $variables
 */
function uhsg_article_process_paragraph_link_titles(array &$variables) {
  if ($variables['element']['#field_name'] == 'field_paragraph_links') {
    foreach ($variables['items'] as &$item) {

      /** @var $url \Drupal\Core\Url */
      $url = $item['content']['#url'];

      // If the link is internal and title matches url, no title is set.
      if ($url->isRouted() && $item['content']['#title'] == $url->toString()) {

        // Check for node links.
        if ($url->getRouteName() == 'entity.node.canonical') {
          $params = $url->getRouteParameters();
          $nid = $params['node'];
          $node = Node::load($nid);
          $translation = \Drupal::entityManager()->getTranslationFromContext($node);
          $item['content']['#title'] = $translation->getTitle();

          // Add target node to cache tags in case the node title changes.
          $variables['#cache']['tags'][] = 'node:' . $nid;
        }
      }
    }
  }
}

/**
 * Filter paragraphs by mismatched degree programmes.
 *
 * @param array $variables
 * @param TermInterface $degree_programme
 */
function uhsg_article_filter_paragraphs_by_degree_programme(array &$variables, TermInterface $degree_programme) {
  foreach ($variables['items'] as $key => $item) {
    // For each paragraph, if terms are given. Filter paragraph if it doesn't
    // match given degree programme.
    $terms = $item['content']['#paragraph']->get('field_paragraph_degree_programme')->getValue();
    if ($terms) {
      $valid_term_found = FALSE;
      foreach ($terms as $term) {
        // if paragraph has terms, show it only if term is in path
        if ($degree_programme->id() == $term['target_id']) {
          $valid_term_found = TRUE;
          break;
        }
      }
      if (!$valid_term_found) {
        unset($variables['items'][$key]);
      }
    }
  }
}

/**
 * Filter paragraphs if they have degree programme defined.
 *
 * @param array $variables
 */
function uhsg_article_filter_paragraphs_with_degree_programme(array &$variables) {
  foreach ($variables['items'] as $key => $item) {
    $terms = $item['content']['#paragraph']->get('field_paragraph_degree_programme')->getValue();
    if ($terms) {
      unset($variables['items'][$key]);
    }
  }
}

/**
 * Collect table of contents.
 *
 * @param array $variables
 */
function uhsg_article_collect_table_of_contents(array &$variables) {
  $variables['table_of_contents'] = [];
  foreach ($variables['items'] as $key => $item) {
    $variables['table_of_contents'][] = [
      'id' => $item['content']['#paragraph']->id(),
      'title' => $item['content']['#paragraph']->get('field_paragraph_title')
    ];
  }
}

<?php

use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Language\LanguageInterface;

/**
 * @file
 * Functions to support theming in the uhsg_theme theme.
 */

/**
 * Implements hook_preprocess_HOOK() for Region templates.
 */
function uhsg_theme_preprocess_region(&$variables) {
  switch ($variables['region']) {
    case 'header':
      $variables['logo_path'] = \Drupal::config('uhsg_service_provider_details.settings')->get('logo_path');
      $variables['logo_text'] = \Drupal::config('uhsg_service_provider_details.settings')->get('logo_text');
      break;
    case 'footer':
      $variables['logo_path'] = \Drupal::config('uhsg_service_provider_details.settings')->get('logo_path');
      $variables['copyright_text'] = \Drupal::config('uhsg_service_provider_details.settings')->get('copyright_text');
      $variables['contact_info'] = \Drupal::config('uhsg_service_provider_details.settings')->get('contact_info');
      break;
    case 'before_content':
    case 'after_content':
      $variables['attributes']['class'][] = 'container';
  }
}

/**
 * Implements hook_preprocess_HOOK() for language links.
 */
function uhsg_theme_preprocess_links__language_block(&$variables) {
  foreach ($variables['links'] as $langcode => &$link) {
    // add classes for theming
    $link['link']['#options']['attributes']['class'][] = 'links__link theme-language';

    // hide active language
    $active_language = Drupal::languageManager()->getCurrentLanguage()->getId();
    if ($active_language == $langcode) {
      unset($variables['links'][$langcode]);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for node links.
 */
function uhsg_theme_preprocess_links__node(&$variables) {
  // Remove classes
  $variables['attributes']['class'] = [];
}

/**
 * Implements hook_preprocess_HOOK() for menus.
 * Add classes needed by styleguide.
 */
function uhsg_theme_preprocess_menu(&$variables) {
  $menu_classes = '';
  $link_classes = '';

  switch ($variables['menu_name']) {
    case 'header-links-en':
    case 'header-links-fi':
    case 'header-links-sv':
      $link_classes = 'links__link';
      $menu_classes = 'links';
      break;
    case 'footer-links-en':
    case 'footer-links-fi':
    case 'footer-links-sv':
      $link_classes = 'list-of-links__link button--action icon--arrow-right theme-transparent';
      $menu_classes = 'list-of-links--condensed theme-footer';
      break;
    case 'main':
      $link_classes = 'is-lvl1 menu-item';
      $menu_classes = 'menu';
      $variables['home_link']['link'] = \Drupal::config('uhsg_service_provider_details.settings')->get('logo_path');
      $variables['home_link']['classes'] = $link_classes . ' main-menu__front';
      break;
  }

  if ($menu_classes && $link_classes) {
    $variables['attributes']['class'][] = $menu_classes;
    foreach ($variables['items'] as &$item) {
      $item['attributes']->addClass($link_classes);

      // we want a different active-class than what drupal provides.
      $current_path = \Drupal::request()->getRequestUri();
      if ($item['url']->toString() == $current_path) {
        $item['is_active'] = TRUE;
      }
    }
  }
}

/**
 * Implements hook_preprocess_field().
 * Add classes needed by styleguide.
 */
function uhsg_theme_preprocess_field(array &$variables, $hook) {
  switch ($variables['element']['#field_name']) {
    case 'field_paragraph_links':
      $variables['attributes']['class'][] = 'list-of-links';
      foreach ($variables['items'] as &$item) {
        $item['content']['#options']['attributes']['class'][] = 'list-of-links__link button--action icon--arrow-right';
      }
      break;
    case 'field_theme_articles':
      $variables['title_attributes']['class'][] = 'tube';
      $variables['attributes']['class'][] = 'grid-container';
      break;
    case 'field_article_paragraph':
      $variables['table_of_contents'] = [];
      foreach ($variables['items'] as $item) {
        $variables['table_of_contents'][] = [
          'id' => $item['content']['#paragraph']->id(),
          'title' => $item['content']['#paragraph']->get('field_paragraph_title')
        ];
      }
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK() for views.
 */
function uhsg_theme_preprocess_views_view(&$variables) {
  switch ($variables['view']->id()) {
    case 'themes':
      $variables['attributes']['class'][] = 'grid-container';
      break;
    case 'taxonomy_term':
    case 'news_per_degree_programme':
      $variables['attributes']['class'][] = 'grid-container tube--large';
      break;
    case 'degree_programmes':
      $node = \Drupal::routeMatch()->getParameter('node');
      $term = \Drupal::routeMatch()->getParameter('taxonomy_term');
      if ($node && $node->hasField('field_article_degree_programme') && isset($node->get('field_article_degree_programme')->target_id)) {
        $term = Term::load($node->get('field_article_degree_programme')->target_id);
        $term_translated = \Drupal::service('entity.repository')->getTranslationFromContext($term);
        $variables['title'] = $term_translated->getName();
      }
      elseif ($term && $term->bundle() == 'degree_programme') {
        $variables['title'] = $term->getName();
      }
      else {
        $variables['title'] = $variables['view']->getTitle();
      }
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function uhsg_theme_preprocess_block(array &$variables) {
  switch ($variables['elements']['#id']) {
    case 'mainnavigation':
      $variables['attributes']['class'][] = 'main-menu';
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK() for views exposed forms.
 */
function uhsg_theme_preprocess_views_exposed_form(&$variables) {
  switch ($variables['form']['#id']) {
    case 'views-exposed-form-degree-programmes-block-1':
      $variables['form']['name']['#attributes']['placeholder'] = t('Name of degree programme');
      $variables['form']['actions']['submit']['#suffix'] = '<i class="icon--search"></i>';
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 * Add id attribute to each paragraph for linking to it from the table of contents.
 */
function uhsg_theme_preprocess_paragraph(&$variables) {
  $variables['attributes']['id'] = 'paragraph-' . $variables['paragraph']->id();
  $variables['attributes']['class'][] = 'paragraph';
}

/**
 * Implements template_preprocess_page().
 * Add Node or term changed time as variable.
 */
function uhsg_theme_preprocess_page(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  $term = \Drupal::routeMatch()->getParameter('taxonomy_term');
  if ($node) {
    $variables['updated'] = \Drupal::service('date.formatter')->format($node->getChangedTime(), 'short');
  }
  if ($term) {
    $variables['updated'] = \Drupal::service('date.formatter')->format($term->getChangedTime(), 'short');
  }
}

/**
 * Implements hook_form_alter().
 * Hide preview and message field label from feedback form.
 */
function uhsg_theme_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'contact_message_feedback_form_form') {
    $form['message']['widget'][0]['value']['#title_display'] = 'visually-hidden';
    $form['message']['widget'][0]['value']['#placeholder'] = t('Give feedback about the service...');
    $form['mail']['#required'] = FALSE;
    $form['actions']['preview']['#access'] = FALSE;
    $form['actions']['submit']['#value'] = t('Send feedback');
  }
}

/**
 * Implements hook_preprocess_HOOK().
 * Feedback form hidden by default.
 */
function uhsg_theme_preprocess_form(&$variables) {
  if ($variables['element']['#form_id'] == 'contact_message_feedback_form_form') {
    $variables['attributes']['class'][] = 'visually-hidden';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 * hide contact form email by default.
 */
function uhsg_theme_preprocess_form_element(&$variables) {
  if ($variables['element']['#id'] == 'edit-mail') {
    $variables['attributes']['class'][] = 'visually-hidden';
  }
}

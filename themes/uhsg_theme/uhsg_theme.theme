<?php

use Drupal\Core\Language\LanguageInterface;
use Drupal\Component\Render\FormattableMarkup;
use Drupal\node\Entity\Node;

/**
 * @file
 * Functions to support theming in the uhsg_theme theme.
 */

/**
 * Implements hook_page_attachments_alter().
 * Add breakpoints to javascript
 */
function uhsg_theme_page_attachments_alter(array &$page) {
  $breakpoints = \Drupal::service('breakpoint.manager')->getBreakpointsByGroup('UhsgTheme');
  if ($breakpoints) {
    $media_queries = [];
    foreach ($breakpoints as $id => $breakpoint) {
      $media_queries[$id] = $breakpoint->getMediaQuery();
    }
    $page['#attached']['drupalSettings']['breakpoints'] = $media_queries;
  }
}

/**
 * Implements hook_preprocess_HOOK() for Region templates.
 */
function uhsg_theme_preprocess_region(&$variables) {
  switch ($variables['region']) {
    case 'header':
      $variables['logo_path'] = \Drupal::config('uhsg_service_provider_details.settings')->get('logo_path');
      $variables['logo_text'] = \Drupal::config('uhsg_service_provider_details.settings')->get('logo_text');
      break;
    case 'footer':
      $variables['logo_path'] = \Drupal::config('uhsg_service_provider_details.settings')->get('logo_path');
      $variables['copyright_text'] = \Drupal::config('uhsg_service_provider_details.settings')->get('copyright_text');
      $variables['contact_info'] = \Drupal::config('uhsg_service_provider_details.settings')->get('contact_info');
      break;
    case 'before_content':
    case 'after_content':
      $variables['attributes']['class'][] = 'container';
  }
}

/**
 * Implements hook_preprocess_HOOK() for language links.
 */
function uhsg_theme_preprocess_links__language_block(&$variables) {
  foreach ($variables['links'] as $langcode => &$link) {
    // add classes for theming
    $link['link']['#options']['attributes']['class'][] = 'links__link theme-language';
    $link['link']['#title'] = new FormattableMarkup('<abbr title="@title">@langcode</abbr>', array('@title' => $link['link']['#title'], '@langcode' => $langcode ));
    // hide active language
    $active_language = Drupal::languageManager()->getCurrentLanguage()->getId();
    if ($active_language == $langcode) {
      unset($variables['links'][$langcode]);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for menus.
 * Add classes needed by styleguide.
 */
function uhsg_theme_preprocess_menu(&$variables) {
  $menu_classes = '';
  $link_classes = '';

  switch ($variables['menu_name']) {
    case 'header-links-en':
    case 'header-links-fi':
    case 'header-links-sv':
      $link_classes = 'links__link';
      $menu_classes = 'links';
      break;
    case 'footer-links-en':
    case 'footer-links-fi':
    case 'footer-links-sv':
      $link_classes = 'list-of-links__link button--action icon--arrow-right theme-transparent';
      $menu_classes = 'list-of-links--condensed theme-footer';
      break;
    case 'main':
      $link_classes = 'is-lvl1 menu-item';
      $menu_classes = 'menu';
      $variables['home_link']['link'] = \Drupal::config('uhsg_service_provider_details.settings')->get('home_path');
      $variables['home_link']['classes'] = $link_classes . ' main-menu__front';
      foreach ($variables['items'] as $item) {
        if ($item['url']->isRouted()) {
          switch ($item['url']->getRouteName()) {
            case 'samlauth.saml_controller_login':
              $item['attributes']->addClass('main-menu__right');
              break;
            case 'samlauth.saml_controller_logout':
              $item['attributes']->addClass(['main-menu__right', 'main-menu__logout']);
              break;
          }
        }
      }
      break;
  }

  if ($menu_classes && $link_classes) {
    $variables['attributes']['class'][] = $menu_classes;
    foreach ($variables['items'] as &$item) {
      $item['attributes']->addClass($link_classes);

      // we want a different active-class than what drupal provides.
      $current_path = \Drupal::request()->getRequestUri();
      if ($item['url']->toString() == $current_path) {
        $item['is_active'] = TRUE;
      }
    }
  }
}

/**
 * Implements hook_preprocess_field().
 * Add classes needed by styleguide.
 */
function uhsg_theme_preprocess_field(array &$variables, $hook) {
  switch ($variables['element']['#field_name']) {
    case 'field_paragraph_links':
      uhsg_theme_process_link_titles($variables);
      $variables['attributes']['class'][] = 'list-of-links';
      foreach ($variables['items'] as &$item) {
        $item['content']['#options']['attributes']['class'][] = 'list-of-links__link button--action icon--arrow-right';
      }
      break;
    case 'field_accordion_links':
      uhsg_theme_process_link_titles($variables);
      $variables['attributes']['class'][] = 'list-of-links__compact';
      foreach ($variables['items'] as &$item) {
        $item['content']['#options']['attributes']['class'][] = 'list-of-links__link icon--arrow-right button--action theme-transparent';
      }
      break;
    case 'field_theme_articles':
      $variables['title_attributes']['class'][] = 'tube';
      $variables['attributes']['class'][] = 'grid-container';
      break;
    case 'body':
    case 'field_paragraph_body':
      $variables['attributes']['class'][] = 'textarea';
      break;
    case 'field_accordion_title':
      $variables['attributes']['class'][] = 'accordion__title button--accordion';
      break;
  }
}


/**
 * If the link targets a node and no link title is set, use link target node
 * title as the link text.
 *
 * @param array $variables
 */
function uhsg_theme_process_link_titles(array &$variables) {
  foreach ($variables['items'] as &$item) {

    /** @var $url \Drupal\Core\Url */
    $url = $item['content']['#url'];

    // If the link is internal and title matches url, no title is set.
    if ($url->isRouted() && $item['content']['#title'] == $url->toString()) {

      // Check for node links.
      if ($url->getRouteName() == 'entity.node.canonical') {
        $params = $url->getRouteParameters();
        $nid = $params['node'];
        $node = Node::load($nid);
        $translation = \Drupal::entityManager()->getTranslationFromContext($node);
        $item['content']['#title'] = $translation->getTitle();

        // Add target node to cache tags in case the node title changes.
        $variables['#cache']['tags'][] = 'node:' . $nid;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for views.
 */
function uhsg_theme_preprocess_views_view(&$variables) {
  switch ($variables['view']->id()) {
    case 'themes':
      $variables['content_attributes']['class'][] = 'grid-container';
      break;
    case 'search':
      $variables['attributes']['class'][] = 'grid-container';
      break;
    case 'news':
      $variables['attributes']['class'][] = 'tube';
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function uhsg_theme_preprocess_block(array &$variables) {
  switch ($variables['elements']['#id']) {
    case 'mainnavigation':
      $variables['attributes']['class'][] = 'main-menu';
      break;
    case 'views_block__degree_programmes_block_1':
      $variables['label'] = \Drupal::service('uhsg_active_degree_programme.active_degree_programme')->getName();
      $variables['#cache']['contexts'][] = 'active_degree_programme';
      $variables['reset_link']['link'] =  \Drupal\Core\Url::fromRoute('uhsg_active_degree_programme.reset_active');
      $variables['reset_link']['classes'] = 'button--action icon--remove theme-transparent button--reset is-center-mobile';
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK() for views exposed forms.
 */
function uhsg_theme_preprocess_views_exposed_form(&$variables) {
  switch ($variables['form']['#id']) {
    case 'views-exposed-form-search-page-1':
      $variables['form']['search_api_fulltext']['#attributes']['placeholder'] = t('For example topic or university service');
      $variables['form']['actions']['reset']['#suffix'] = '<i class="icon--remove"></i>';
      $variables['form']['actions']['reset']['#attributes']['class'][] = 'button--reset';
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 * Add id attribute to each paragraph for linking to it from the table of contents.
 */
function uhsg_theme_preprocess_paragraph(&$variables) {
  $variables['attributes']['id'] = 'paragraph-' . $variables['paragraph']->id();
  $variables['attributes']['class'][] = 'paragraph';
}

/**
 * Implements template_preprocess_page().
 * Add Node or term changed time as variable.
 */
function uhsg_theme_preprocess_page(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  $term = \Drupal::routeMatch()->getParameter('taxonomy_term');
  if ($node) {
    $variables['updated'] = \Drupal::service('date.formatter')->format($node->getChangedTime(), 'short');
  }
  if ($term) {
    $variables['updated'] = \Drupal::service('date.formatter')->format($term->getChangedTime(), 'short');
  }
}

/**
 * Implements template_preprocess_file_link().
 *
 * Override file link classes with styleguide classes.
 */
function uhsg_theme_preprocess_file_link(&$variables) {
  $variables['attributes']['class'] = ['list-of-links__link button--action icon--arrow-right theme-transparent'];
}

/**
 * Implements template_preprocess_node().
 * Add styleguide classes.
 */
function uhsg_theme_preprocess_node(&$variables) {
  if ($variables['view_mode'] == 'teaser') {
    $variables['type'] = $variables['node']->type->entity->label();
  }
}

/**
 * Implements template_preprocess_html().
 * Add touch icons to head.
 */
function uhsg_theme_preprocess_html(&$variables) {
  $theme_path = drupal_get_path('theme', 'uhsg_theme');
  $files = file_scan_directory($theme_path . '/images/favicons', '/.*\.png$/');

  foreach ($files as $url => $file) {
    $icon = [
      '#tag' => 'link',
      '#attributes' => [
        'rel' => preg_match('/(apple-touch-icon)/',$file->name) ? 'apple-touch-icon' : 'icon',
        'href' => file_create_url($file->uri),
        'type' => preg_match('/(apple-touch-icon)/',$file->name) ? NULL : 'image/png',
        'sizes' => preg_match('/[0-9]\w+/',$file->name, $matches) ? $matches[0] : NULL
      ],
    ];
    $variables['page']['#attached']['html_head'][] = [$icon, $file->name];
  }
}
